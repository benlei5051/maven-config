<?xml version="1.0"?>
<project
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"
	xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>com.easyframework</groupId>
		<artifactId>easyframework-web</artifactId>
		<version>0.0.1-SNAPSHOT</version>
	</parent>
	<artifactId>easyframework-admin</artifactId>
	<packaging>war</packaging>

	<dependencies>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>3.8.1</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>javax.servlet-api</artifactId>
		</dependency>
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>jstl</artifactId>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-log4j12</artifactId>
		</dependency>
	</dependencies>
	<build>
		<!-- 首先第一个资源文件位置src/main/resources需要排除各个环境的配置文件， 各个环境的配置我们在第二个<resource>节点中通过前面在profile中配置的profiles.active属性来指定。 
			即src/main/resources/${profiles.active}。这样在激活指定的profile时，会加载指定目录下的配置文件， 如当前激活的是production 
			profile，那么这个资源目录就是src/main/resources/production。 这样就达到了不同环境加载不同配置的目的。 -->
		<resources>
			<resource>
				<directory>src/main/resources</directory>
				<!-- 资源根目录排除各环境的配置，使用单独的资源目录来指定 -->
				<excludes>
					<exclude>test/*</exclude>
					<exclude>production/*</exclude>
					<exclude>development/*</exclude>
				</excludes>
			</resource>
			<resource>
				<directory>src/main/resources/${profiles.active}</directory>
			</resource>
		</resources>
	</build>
</project>
